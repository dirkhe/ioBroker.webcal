{
  "version": 3,
  "sources": ["../../src/lib/calDav.ts"],
  "sourcesContent": ["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { AdapterInstance } from \"@iobroker/adapter-core\";\nimport { DAVAccount, DAVCalendar, DAVCalendarObject, DAVClient, DAVCredentials } from \"tsdav\";\nimport { IcalCalendarEvent, initLib as IcalInit } from \"./IcalCalendarEvent\";\n\nlet adapter: AdapterInstance;\n\nexport function initLib(adapterInstance: AdapterInstance, localTimeZone: string): void {\n\tadapter = adapterInstance;\n\tIcalInit(adapterInstance, localTimeZone);\n}\nexport class DavCalCalendar implements webcal.ICalendarBase {\n\tname: string;\n\tclient: DAVClient;\n\tignoreSSL = false;\n\tcalendar: DAVCalendar | undefined;\n\n\tconstructor(calConfig: webcal.IConfigCalendar) {\n\t\tthis.name = calConfig.name;\n\t\tconst params: {\n\t\t\tserverUrl: string;\n\t\t\tcredentials: DAVCredentials;\n\t\t\tauthMethod?: \"Basic\" | \"Oauth\";\n\t\t\tdefaultAccountType?: DAVAccount[\"accountType\"] | undefined;\n\t\t} =\n\t\t\tcalConfig.authMethod == \"Oauth\"\n\t\t\t\t? {\n\t\t\t\t\t\tserverUrl: calConfig.serverUrl,\n\t\t\t\t\t\tcredentials: {\n\t\t\t\t\t\t\ttokenUrl: calConfig.tokenUrl,\n\t\t\t\t\t\t\tusername: calConfig.username,\n\t\t\t\t\t\t\trefreshToken: calConfig.refreshToken,\n\t\t\t\t\t\t\tclientId: calConfig.clientId,\n\t\t\t\t\t\t\tclientSecret: calConfig.password,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tauthMethod: calConfig.authMethod,\n\t\t\t\t\t\tdefaultAccountType: \"caldav\",\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\tserverUrl: calConfig.serverUrl,\n\t\t\t\t\t\tcredentials: {\n\t\t\t\t\t\t\tusername: calConfig.username,\n\t\t\t\t\t\t\tpassword: calConfig.password,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tauthMethod: \"Basic\",\n\t\t\t\t\t\tdefaultAccountType: \"caldav\",\n\t\t\t\t  };\n\t\tthis.client = new DAVClient(params);\n\t\tthis.ignoreSSL = !!calConfig.ignoreSSL;\n\t}\n\n\t/**\n\t * load Calendars from Server\n\t * @param displayName if set, try to return Calendar with this name\n\t * @returns Calender by displaName or last part of initial ServerUrl or first found Calendar\n\t */\n\tprivate async getCalendar(displayName?: string): Promise<DAVCalendar> {\n\t\tif (!this.calendar) {\n\t\t\tif (!this.client.account) {\n\t\t\t\tawait this.client.login();\n\t\t\t}\n\t\t\tconst calendars: Array<DAVCalendar> = await this.client.fetchCalendars();\n\t\t\t//console.log(calendars)\n\t\t\tif (displayName) {\n\t\t\t\tconst displayNameLowerCase = displayName.toLocaleLowerCase();\n\t\t\t\tfor (let i = 0; i < calendars.length; i++) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcalendars[i].displayName &&\n\t\t\t\t\t\ttypeof calendars[i].displayName === \"string\" &&\n\t\t\t\t\t\t(calendars[i].displayName as string).toLowerCase() == displayNameLowerCase\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.calendar = calendars[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < calendars.length; i++) {\n\t\t\t\t\tif (calendars[i].url == this.client.serverUrl) {\n\t\t\t\t\t\tthis.calendar = calendars[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.calendar) {\n\t\t\t\tthis.calendar = calendars[0];\n\t\t\t}\n\t\t}\n\t\treturn this.calendar;\n\t}\n\n\t/**\n\t * fetch Events form Calendar\n\t * @param startDate as date object\n\t * @param endDate as date object\n\t * @returns Array of Calenderobjects\n\t */\n\tprivate async getCalendarObjects(\n\t\tstartDateISOString?: string,\n\t\tendDateISOString?: string,\n\t): Promise<DAVCalendarObject[]> {\n\t\tlet storeDefaultIgnoreSSL: string | undefined | null = null;\n\t\tif (this.ignoreSSL && process.env.NODE_TLS_REJECT_UNAUTHORIZED != \"0\") {\n\t\t\tstoreDefaultIgnoreSSL = process.env.NODE_TLS_REJECT_UNAUTHORIZED;\n\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n\t\t}\n\t\tconst searchParams: any = {\n\t\t\tcalendar: await this.getCalendar(),\n\t\t};\n\t\tif (startDateISOString) {\n\t\t\tsearchParams.timeRange = {\n\t\t\t\tstart: startDateISOString,\n\t\t\t\tend: endDateISOString || startDateISOString,\n\t\t\t};\n\t\t}\n\t\treturn this.client.fetchCalendarObjects(searchParams).finally(() => {\n\t\t\tif (storeDefaultIgnoreSSL !== null) {\n\t\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = storeDefaultIgnoreSSL;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * fetch Events form Calendar and pushed them to calEvents Array\n\t * @param calEvents target Array of ICalendarEventBase\n\t * @param startDate as date object\n\t * @param endDate as date object\n\t * @returns null or errorstring\n\t */\n\tloadEvents(calEvents: webcal.ICalendarEventBase[], startDate: Date, endDate: Date): Promise<null | string> {\n\t\treturn this.getCalendarObjects(startDate.toISOString(), endDate.toISOString())\n\t\t\t.then((calendarObjects) => {\n\t\t\t\tif (calendarObjects) {\n\t\t\t\t\tadapter.log.info(\"found \" + calendarObjects.length + \" calendar objects\");\n\t\t\t\t\t/* test for now update ...\n\t\t\t\t\t\t\t\t\t\tconst calEvent = new CalendarEvent(calendarObjects[0].data);\n\t\t\t\t\t\t\t\t\t\tcalEvent.startDate = dayjs().add(1, \"minute\");\n\t\t\t\t\t\t\t\t\t\tcalEvent.endDate = dayjs().add(2, \"minute\");\n\t\t\t\t\t\t\t\t\t\tfor (let evID in this.events) {\n\t\t\t\t\t\t\t\t\t\t\tthis.events[evID].addCalendarEvent(calEvent, calEvent.getDays(startDate));\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tfor (const i in calendarObjects) {\n\t\t\t\t\t\tconst ev: IcalCalendarEvent | null = IcalCalendarEvent.fromData(\n\t\t\t\t\t\t\tcalendarObjects[i].data,\n\t\t\t\t\t\t\tthis.name,\n\t\t\t\t\t\t\tstartDate,\n\t\t\t\t\t\t\tendDate,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tev && calEvents.push(ev);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t})\n\t\t\t.catch((reason) => {\n\t\t\t\treturn reason.message;\n\t\t\t});\n\t}\n\n\t/**\n\t * add Event to Calendar\n\t * @param data event data\n\t * @returns Server response, like {ok:boolen}\n\t */\n\tasync addEvent(data: webcal.ICalendarEventData): Promise<any> {\n\t\tlet storeDefaultIgnoreSSL: string | undefined | null = null;\n\t\tif (this.ignoreSSL && process.env.NODE_TLS_REJECT_UNAUTHORIZED != \"0\") {\n\t\t\tstoreDefaultIgnoreSSL = process.env.NODE_TLS_REJECT_UNAUTHORIZED;\n\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n\t\t}\n\t\tlet result;\n\t\ttry {\n\t\t\tconst calendarEventData = IcalCalendarEvent.createIcalEventString(data);\n\t\t\tresult = await this.client.createCalendarObject({\n\t\t\t\tcalendar: await this.getCalendar(),\n\t\t\t\tfilename: new Date().getTime() + \".ics\",\n\t\t\t\tiCalString: calendarEventData,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tresult = {\n\t\t\t\tok: false,\n\t\t\t\tmessage: error,\n\t\t\t};\n\t\t}\n\t\tif (storeDefaultIgnoreSSL !== null) {\n\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = storeDefaultIgnoreSSL;\n\t\t}\n\t\t//console.log(result);\n\t\t//console.log(result.ok);\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["IcalInit"]
}
