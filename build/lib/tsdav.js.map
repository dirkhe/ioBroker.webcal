{
  "version": 3,
  "sources": ["../../src/lib/tsdav.ts"],
  "sourcesContent": ["//import { ICalCalendar, ICalEventData } from \"ical-generator\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { DAVAccount, DAVCalendar, DAVCalendarObject, DAVClient, DAVCredentials } from \"tsdav\";\n\nexport class DavCal {\n\tclient: DAVClient;\n\tignoreSSL = false;\n\tisLoggedIn = false;\n\tcalendar: DAVCalendar | undefined;\n\n\tconstructor(\n\t\tparams: {\n\t\t\tserverUrl: string;\n\t\t\tcredentials: DAVCredentials;\n\t\t\tauthMethod?: \"Basic\" | \"Oauth\";\n\t\t\tdefaultAccountType?: DAVAccount[\"accountType\"] | undefined;\n\t\t},\n\t\tignoreSSL?: boolean,\n\t) {\n\t\tthis.client = new DAVClient(params);\n\t\tthis.ignoreSSL = !!ignoreSSL;\n\t}\n\n\t/**\n\t * will login to Server\n\t * @returns if it was sucessfull\n\t */\n\tasync login(): Promise<boolean> {\n\t\tlet storeDefaultIgnoreSSL: string | undefined | null = null;\n\t\tif (this.ignoreSSL) {\n\t\t\tstoreDefaultIgnoreSSL = process.env.NODE_TLS_REJECT_UNAUTHORIZED;\n\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n\t\t}\n\t\tawait this.client\n\t\t\t.login()\n\t\t\t.then(() => {\n\t\t\t\tthis.isLoggedIn = true;\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tif (storeDefaultIgnoreSSL !== null) {\n\t\t\t\t\tprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = storeDefaultIgnoreSSL;\n\t\t\t\t}\n\t\t\t});\n\t\treturn this.isLoggedIn;\n\t}\n\n\t/**\n\t * load Calendars from Server\n\t * @param displayName if set, try to return Calendar with this name\n\t * @returns Calender by displaName or last part of initial ServerUrl or first found Calendar\n\t */\n\tasync getCalendar(displayName?: string): Promise<DAVCalendar> {\n\t\tif (!this.calendar) {\n\t\t\tif (!this.isLoggedIn) {\n\t\t\t\tawait this.login();\n\t\t\t}\n\t\t\tconst calendars = await this.client.fetchCalendars();\n\t\t\t//console.log(calendars)\n\t\t\tif (displayName) {\n\t\t\t\tconst displayNameLowerCase = displayName.toLocaleLowerCase();\n\t\t\t\tfor (let i = 0; i < calendars.length; i++) {\n\t\t\t\t\tif (calendars[i].displayName?.toLowerCase() == displayNameLowerCase) {\n\t\t\t\t\t\tthis.calendar = calendars[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < calendars.length; i++) {\n\t\t\t\t\tif (calendars[i].url == this.client.serverUrl) {\n\t\t\t\t\t\tthis.calendar = calendars[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.calendar) {\n\t\t\t\tthis.calendar = calendars[0];\n\t\t\t}\n\t\t}\n\t\treturn this.calendar;\n\t}\n\n\t/**\n\t * fetch Events form Calendar\n\t * @param startDate as date object\n\t * @param endDate as date object\n\t * @returns Array of Calenderobjects\n\t */\n\tasync getEvents(startDateISOString?: string, endDateISOString?: string): Promise<DAVCalendarObject[]> {\n\t\tconst searchParams: any = {\n\t\t\tcalendar: await this.getCalendar(),\n\t\t};\n\t\tif (startDateISOString) {\n\t\t\tsearchParams.timeRange = {\n\t\t\t\tstart: startDateISOString,\n\t\t\t\tend: endDateISOString || startDateISOString,\n\t\t\t};\n\t\t}\n\t\treturn this.client.fetchCalendarObjects(searchParams);\n\t}\n\n\t/**\n\t * add Event to Calendar\n\t * @param data event data\n\t * @returns Server response, like {ok:boolen}\n\t */\n\tasync addEvent(iCalString: string): Promise<any> {\n\t\tconst result = await this.client.createCalendarObject({\n\t\t\tcalendar: await this.getCalendar(),\n\t\t\tfilename: new Date().getTime() + \".ics\",\n\t\t\tiCalString: iCalString,\n\t\t});\n\t\t//console.log(result);\n\t\t//console.log(result.ok);\n\t\treturn result;\n\t}\n\t/*\n\tasync addEvent(data: ICalEventData): Promise<any> {\n\t\tconst cal = new ICalCalendar();\n\t\tcal.createEvent(data);\n\t\tconsole.log(cal.toString());\n\n\t\tconst result = await this.client.createCalendarObject({\n\t\t\tcalendar: await this.getCalendar(),\n\t\t\tfilename: new Date().getTime() + \".ics\",\n\t\t\tiCalString: cal.toString(),\n\t\t});\n\t\tconsole.log(result);\n\t\tconsole.log(result.ok);\n\t\treturn result;\n\t}\n\t*/\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,mBAAsF;AAE/E,MAAM,OAAO;AAAA,EAMnB,YACC,QAMA,WACC;AAZF,qBAAY;AACZ,sBAAa;AAYZ,SAAK,SAAS,IAAI,uBAAU,MAAM;AAClC,SAAK,YAAY,CAAC,CAAC;AAAA,EACpB;AAAA,EAMA,MAAM,QAA0B;AAC/B,QAAI,wBAAmD;AACvD,QAAI,KAAK,WAAW;AACnB,8BAAwB,QAAQ,IAAI;AACpC,cAAQ,IAAI,+BAA+B;AAAA,IAC5C;AACA,UAAM,KAAK,OACT,MAAM,EACN,KAAK,MAAM;AACX,WAAK,aAAa;AAAA,IACnB,CAAC,EACA,QAAQ,MAAM;AACd,UAAI,0BAA0B,MAAM;AACnC,gBAAQ,IAAI,+BAA+B;AAAA,MAC5C;AAAA,IACD,CAAC;AACF,WAAO,KAAK;AAAA,EACb;AAAA,EAOA,MAAM,YAAY,aAA4C;AApD/D;AAqDE,QAAI,CAAC,KAAK,UAAU;AACnB,UAAI,CAAC,KAAK,YAAY;AACrB,cAAM,KAAK,MAAM;AAAA,MAClB;AACA,YAAM,YAAY,MAAM,KAAK,OAAO,eAAe;AAEnD,UAAI,aAAa;AAChB,cAAM,uBAAuB,YAAY,kBAAkB;AAC3D,iBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAC1C,gBAAI,eAAU,GAAG,gBAAb,mBAA0B,kBAAiB,sBAAsB;AACpE,iBAAK,WAAW,UAAU;AAC1B;AAAA,UACD;AAAA,QACD;AAAA,MACD,OAAO;AACN,iBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAC1C,cAAI,UAAU,GAAG,OAAO,KAAK,OAAO,WAAW;AAC9C,iBAAK,WAAW,UAAU;AAC1B;AAAA,UACD;AAAA,QACD;AAAA,MACD;AACA,UAAI,CAAC,KAAK,UAAU;AACnB,aAAK,WAAW,UAAU;AAAA,MAC3B;AAAA,IACD;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAQA,MAAM,UAAU,oBAA6B,kBAAyD;AACrG,UAAM,eAAoB;AAAA,MACzB,UAAU,MAAM,KAAK,YAAY;AAAA,IAClC;AACA,QAAI,oBAAoB;AACvB,mBAAa,YAAY;AAAA,QACxB,OAAO;AAAA,QACP,KAAK,oBAAoB;AAAA,MAC1B;AAAA,IACD;AACA,WAAO,KAAK,OAAO,qBAAqB,YAAY;AAAA,EACrD;AAAA,EAOA,MAAM,SAAS,YAAkC;AAChD,UAAM,SAAS,MAAM,KAAK,OAAO,qBAAqB;AAAA,MACrD,UAAU,MAAM,KAAK,YAAY;AAAA,MACjC,UAAU,IAAI,KAAK,EAAE,QAAQ,IAAI;AAAA,MACjC;AAAA,IACD,CAAC;AAGD,WAAO;AAAA,EACR;AAiBD;",
  "names": []
}
